package com.catshop.catshop.controller;

import com.catshop.catshop.dto.request.ShipmentRequest;
import com.catshop.catshop.dto.response.ApiResponse;
import com.catshop.catshop.dto.response.ShipmentResponse;
import com.catshop.catshop.service.ShipmentService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;

@RestController
@RequestMapping("/api/shipments")
@RequiredArgsConstructor
public class ShipmentController {

    private final ShipmentService shipmentService;

    // ===============================
    // üëë ADMIN SECTION
    // ===============================

    // üü¢ L·∫•y t·∫•t c·∫£ shipment (m·ªõi nh·∫•t tr∆∞·ªõc)
    @GetMapping("/admin/all")
    public ApiResponse<List<ShipmentResponse>> getAllShipments() {
        return ApiResponse.success(
                shipmentService.findAllOrderByDateDesc(),
                "L·∫•y danh s√°ch shipment th√†nh c√¥ng"
        );
    }

    // üü¢ L·ªçc shipment theo tr·∫°ng th√°i (status)
    @GetMapping("/admin/status/{status}")
    public ApiResponse<List<ShipmentResponse>> getShipmentsByStatus(@PathVariable String status) {
        return ApiResponse.success(
                shipmentService.findByStatus(status),
                "L·ªçc shipment theo tr·∫°ng th√°i th√†nh c√¥ng"
        );
    }

    // üü¢ T√¨m shipment theo ƒë·ªãa ch·ªâ giao h√†ng
    @GetMapping("/admin/address")
    public ApiResponse<List<ShipmentResponse>> searchByAddress(@RequestParam String address) {
        return ApiResponse.success(
                shipmentService.searchByAddress(address),
                "T√¨m shipment theo ƒë·ªãa ch·ªâ th√†nh c√¥ng"
        );
    }

    // üü¢ L·∫•y shipment trong kho·∫£ng ng√†y giao h√†ng
    @GetMapping("/admin/date-range")
    public ApiResponse<List<ShipmentResponse>> getShipmentsByDateRange(
            @RequestParam LocalDateTime startDate,
            @RequestParam LocalDateTime endDate) {
        return ApiResponse.success(
                shipmentService.findByShippedDateBetween(startDate, endDate),
                "L·∫•y shipment trong kho·∫£ng ng√†y th√†nh c√¥ng"
        );
    }

    // üü¢ Th·ªëng k√™ s·ªë l∆∞·ª£ng shipment theo tr·∫°ng th√°i
    @GetMapping("/admin/count-by-status")
    public ApiResponse<List<Object[]>> countShipmentsByStatus() {
        return ApiResponse.success(
                shipmentService.countShipmentsByStatus(),
                "Th·ªëng k√™ shipment theo tr·∫°ng th√°i th√†nh c√¥ng"
        );
    }

    // üü¢ L·∫•y shipment theo orderId
    @GetMapping("/admin/order/{orderId}")
    public ApiResponse<List<ShipmentResponse>> getShipmentsByOrderId(@PathVariable Long orderId) {
        return ApiResponse.success(
                shipmentService.findByOrderId(orderId),
                "L·∫•y shipment theo OrderId th√†nh c√¥ng"
        );
    }

    // üü¢ L·∫•y shipment theo userId
    @GetMapping("/admin/user/{userId}")
    public ApiResponse<List<ShipmentResponse>> getShipmentsByUserId(@PathVariable Long userId) {
        return ApiResponse.success(
                shipmentService.findAllByUserId(userId),
                "L·∫•y shipment theo UserId th√†nh c√¥ng"
        );
    }

    // üü¢ ƒê·∫øm s·ªë shipment trong th√°ng hi·ªán t·∫°i
    @GetMapping("/admin/count-month")
    public ApiResponse<Long> countShipmentsInCurrentMonth() {
        return ApiResponse.success(
                shipmentService.countShipmentsInCurrentMonth(),
                "ƒê·∫øm s·ªë shipment trong th√°ng hi·ªán t·∫°i th√†nh c√¥ng"
        );
    }

    // üü¢ T·∫°o shipment m·ªõi
    @PostMapping("/admin/create")
    public ApiResponse<ShipmentResponse> createShipment(@Valid @RequestBody ShipmentRequest request) {
        return ApiResponse.success(
                shipmentService.createShipment(request),
                "T·∫°o shipment m·ªõi th√†nh c√¥ng"
        );
    }

    // üü° C·∫≠p nh·∫≠t shipment
    @PutMapping("/admin/update/{id}")
    public ApiResponse<ShipmentResponse> updateShipment(
            @PathVariable Long id,
            @Valid @RequestBody ShipmentRequest request) {
        return ApiResponse.success(
                shipmentService.updateShipment(id, request),
                "C·∫≠p nh·∫≠t shipment th√†nh c√¥ng"
        );
    }

    //  X√≥a shipment
    @DeleteMapping("/admin/delete/{id}")
    public ApiResponse<String> deleteShipment(@PathVariable Long id) {
        shipmentService.deleteShipment(id);
        return ApiResponse.success(
                "ƒê√£ x√≥a shipment c√≥ ID = " + id,
                "X√≥a shipment th√†nh c√¥ng"
        );
    }

    // ===============================
    // üë§ USER SECTION
    // ===============================

    // üü¢ L·∫•y t·∫•t c·∫£ shipment c·ªßa user
    @GetMapping("/user/{userId}/all")
    public ApiResponse<List<ShipmentResponse>> getUserShipments(@PathVariable Long userId) {
        return ApiResponse.success(
                shipmentService.findUserShipments(userId),
                "L·∫•y danh s√°ch shipment c·ªßa user th√†nh c√¥ng"
        );
    }

    // üü¢ L·ªçc shipment theo status c·ªßa user
    @GetMapping("/user/{userId}/status/{status}")
    public ApiResponse<List<ShipmentResponse>> getUserShipmentsByStatus(
            @PathVariable Long userId,
            @PathVariable String status) {
        return ApiResponse.success(
                shipmentService.findUserShipmentsByStatus(userId, status),
                "L·ªçc shipment c·ªßa user theo tr·∫°ng th√°i th√†nh c√¥ng"
        );
    }

    // üü¢ L·ªçc shipment theo kho·∫£ng th·ªùi gian c·ªßa user
    @GetMapping("/user/{userId}/date-range")
    public ApiResponse<List<ShipmentResponse>> getUserShipmentsByDateRange(
            @PathVariable Long userId,
            @RequestParam LocalDateTime startDate,
            @RequestParam LocalDateTime endDate) {
        return ApiResponse.success(
                shipmentService.findUserShipmentsByDateRange(userId, startDate, endDate),
                "L·∫•y shipment c·ªßa user theo kho·∫£ng th·ªùi gian th√†nh c√¥ng"
        );
    }

    // üü¢ Xem chi ti·∫øt shipment c·ª• th·ªÉ c·ªßa user
    @GetMapping("/user/{userId}/detail/{shipmentId}")
    public ApiResponse<ShipmentResponse> getUserShipmentDetail(
            @PathVariable Long shipmentId,
            @PathVariable Long userId) {
        return ApiResponse.success(
                shipmentService.findUserShipmentDetail(shipmentId, userId),
                "L·∫•y chi ti·∫øt shipment th√†nh c√¥ng"
        );
    }
}
