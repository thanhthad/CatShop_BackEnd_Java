package com.catshop.catshop.repository;

import com.catshop.catshop.entity.Shipment;
import com.catshop.catshop.entity.Order;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.time.LocalDateTime;
import java.util.List;

public interface ShipmentRepository extends JpaRepository<Shipment, Long> {

    // ===============================
    // üß≠  PH·∫¶N D√ÄNH CHO ADMIN
    // ===============================

    // 1Ô∏è‚É£ L·∫•y t·∫•t c·∫£ shipment, s·∫Øp x·∫øp theo ng√†y giao m·ªõi nh·∫•t
    @Query("SELECT s FROM Shipment s ORDER BY s.shippedDate DESC")
    List<Shipment> findAllOrderByDateDesc();

    // 2Ô∏è‚É£ L·ªçc theo tr·∫°ng th√°i (status)
    @Query("SELECT s FROM Shipment s WHERE s.status = :status ORDER BY s.shippedDate DESC")
    List<Shipment> findByStatus(@Param("status") String status);

    // 3Ô∏è‚É£ T√¨m theo ƒë·ªãa ch·ªâ giao h√†ng (t√¨m g·∫ßn ƒë√∫ng)
    @Query("SELECT s FROM Shipment s WHERE LOWER(s.shippingAddress) LIKE LOWER(CONCAT('%', :address, '%'))")
    List<Shipment> searchByAddress(@Param("address") String address);

    // 4Ô∏è‚É£ L·ªçc theo kho·∫£ng th·ªùi gian giao h√†ng
    @Query("SELECT s FROM Shipment s WHERE s.shippedDate BETWEEN :startDate AND :endDate ORDER BY s.shippedDate DESC")
    List<Shipment> findByShippedDateBetween(@Param("startDate") LocalDateTime startDate,
                                            @Param("endDate") LocalDateTime endDate);

    // 5Ô∏è‚É£ Th·ªëng k√™: ƒë·∫øm s·ªë shipment theo tr·∫°ng th√°i
    @Query("SELECT s.status, COUNT(s) FROM Shipment s GROUP BY s.status")
    List<Object[]> countShipmentsByStatus();

    // 6Ô∏è‚É£ T√¨m shipment theo orderId
    @Query("SELECT s FROM Shipment s WHERE s.order.orderId = :orderId")
    List<Shipment> findByOrderId(@Param("orderId") Long orderId);

    // 7Ô∏è‚É£ Xem shipment theo userId (qua b·∫£ng Order)
    @Query("SELECT s FROM Shipment s WHERE s.order.user.userId = :userId ORDER BY s.shippedDate DESC")
    List<Shipment> findAllByUserId(@Param("userId") Long userId);

    // 8Ô∏è‚É£ Th·ªëng k√™ t·ªïng s·ªë shipment trong th√°ng hi·ªán t·∫°i
    @Query("SELECT COUNT(s) FROM Shipment s WHERE MONTH(s.shippedDate) = MONTH(CURRENT_DATE) AND YEAR(s.shippedDate) = YEAR(CURRENT_DATE)")
    Long countShipmentsInCurrentMonth();

    // ===============================
    // üë§  PH·∫¶N D√ÄNH CHO USER
    // ===============================

    // 9Ô∏è‚É£ L·∫•y t·∫•t c·∫£ shipment c·ªßa 1 user
    @Query("SELECT s FROM Shipment s WHERE s.order.user.userId = :userId ORDER BY s.shippedDate DESC")
    List<Shipment> findUserShipments(@Param("userId") Long userId);

    // üîü L·ªçc shipment c·ªßa user theo tr·∫°ng th√°i
    @Query("SELECT s FROM Shipment s WHERE s.order.user.userId = :userId AND s.status = :status ORDER BY s.shippedDate DESC")
    List<Shipment> findUserShipmentsByStatus(@Param("userId") Long userId, @Param("status") String status);

    // 11Ô∏è‚É£ T√¨m shipment c·ªßa user theo kho·∫£ng th·ªùi gian
    @Query("SELECT s FROM Shipment s WHERE s.order.user.userId = :userId AND s.shippedDate BETWEEN :startDate AND :endDate")
    List<Shipment> findUserShipmentsByDateRange(@Param("userId") Long userId,
                                                @Param("startDate") LocalDateTime startDate,
                                                @Param("endDate") LocalDateTime endDate);

    // 12Ô∏è‚É£ Xem chi ti·∫øt 1 shipment c·ªßa user (ƒë·∫£m b·∫£o kh√¥ng xem ƒë∆°n c·ªßa ng∆∞·ªùi kh√°c)
    @Query("SELECT s FROM Shipment s WHERE s.shipmentId = :shipmentId AND s.order.user.userId = :userId")
    Shipment findUserShipmentDetail(@Param("shipmentId") Long shipmentId, @Param("userId") Long userId);
}
